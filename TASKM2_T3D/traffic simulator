#include <iostream>
#include <thread>
#include <queue>
#include <vector>
#include <mutex>
#include <condition_variable>
#include <unordered_map>
#include <chrono>
#include <random>
#include <algorithm>  

using namespace std;

const int NUM_PRODUCERS = 2;
const int NUM_CONSUMERS = 2;
const int QUEUE_SIZE = 10;
const int TOP_N = 3;
const int NUM_SIGNALS = 5;
const int MEASUREMENTS_PER_HOUR = 12;

queue<pair<string, pair<string, int>>> traffic_queue;
mutex queue_mutex, data_mutex;
condition_variable queue_cv;
unordered_map<string, int> traffic_data;

random_device rd;
mt19937 gen(rd());
uniform_int_distribution<> signal_dist(1, NUM_SIGNALS);
uniform_int_distribution<> car_dist(1, 50);

bool done = false;  

void producer(int producer_id) {
    for (int i = 0; i < MEASUREMENTS_PER_HOUR; ++i) {
        time_t now = time(0);
        string timestamp = ctime(&now);
        string signal_id = "TL_" + to_string(signal_dist(gen));
        int cars_passed = car_dist(gen);

        unique_lock<mutex> lock(queue_mutex);
        queue_cv.wait(lock, []{ return traffic_queue.size() < QUEUE_SIZE; });

        traffic_queue.push({timestamp, {signal_id, cars_passed}});
        cout << "[Producer " << producer_id << "] Generated -> " 
             << timestamp << " " << signal_id << " " << cars_passed << " cars" << endl;

        queue_cv.notify_all();
        this_thread::sleep_for(chrono::milliseconds(100));  
    }

    unique_lock<mutex> lock(queue_mutex);
    done = true;  
    queue_cv.notify_all();
}

void consumer(int consumer_id) {
    while (true) {
        unique_lock<mutex> lock(queue_mutex);
        queue_cv.wait(lock, []{ return !traffic_queue.empty() || done; });

        if (traffic_queue.empty() && done) {
            break;  
        }

        auto data = traffic_queue.front();
        traffic_queue.pop();
        queue_cv.notify_all();
        lock.unlock();

        string timestamp = data.first;
        string signal_id = data.second.first;
        int cars_passed = data.second.second;

        lock_guard<mutex> data_lock(data_mutex);
        traffic_data[signal_id] += cars_passed;

        cout << "[Consumer " << consumer_id << "] Processed <- " 
             << timestamp << " " << signal_id << " " << cars_passed << " cars" << endl;

        this_thread::sleep_for(chrono::milliseconds(150));  
    }
}

void report_top_n() {
    vector<pair<string, int>> top_signals(traffic_data.begin(), traffic_data.end());

    sort(top_signals.begin(), top_signals.end(), [](auto& a, auto& b) { return a.second > b.second; });

    cout << "\nðŸš¦ *Top Congested Traffic Lights:*" << endl;
    for (int i = 0; i < min(TOP_N, (int)top_signals.size()); ++i) {
        cout << "   " << top_signals[i].first << ": " << top_signals[i].second << " cars passed" << endl;
    }
}

int main() {
    vector<thread> producers, consumers;

    for (int i = 0; i < NUM_PRODUCERS; ++i) {
        producers.push_back(thread(producer, i));
    }
    for (int i = 0; i < NUM_CONSUMERS; ++i) {
        consumers.push_back(thread(consumer, i));
    }

    for (auto& p : producers) {
        p.join();
    }

    queue_cv.notify_all(); 
    for (auto& c : consumers) {
        c.join();
    }

    report_top_n();
    return 0;
}
