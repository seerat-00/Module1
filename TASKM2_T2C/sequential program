#include <iostream>
#include <vector>
#include <chrono>
#include <cstdlib> 
#include <ctime>   

using namespace std;
using namespace std::chrono;

int partition(vector<int> &vec, int low, int high) {
    int pivot = vec[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (vec[j] <= pivot) {
            i++;
            swap(vec[i], vec[j]);
        }
    }

    swap(vec[i + 1], vec[high]);
    return (i + 1);
}

void quickSort(vector<int> &vec, int low, int high) {
    if (low < high) {
        int pi = partition(vec, low, high);
        quickSort(vec, low, pi - 1);
        quickSort(vec, pi + 1, high);
    }
}

int main() {
    srand(time(0)); 

    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> vec(n);
    
    for (int &num : vec) {
        num = rand() % 1000 + 1;
    }

    cout << "Unsorted array: ";
    for (int num : vec) {
        cout << num << " ";
    }
    cout << endl;

    auto start = high_resolution_clock::now();

    quickSort(vec, 0, n - 1);

    auto stop = high_resolution_clock::now();

    auto duration = duration_cast<microseconds>(stop - start);

    cout << "Sorted array: ";
    for (int num : vec) {
        cout << num << " ";
    }
    cout << endl;

    cout << "Execution Time: " << duration.count() << " microseconds" << endl;

    return 0;
}
